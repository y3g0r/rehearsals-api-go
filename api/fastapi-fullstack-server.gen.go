// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Read Items
	// (GET /api/v1/items/)
	ItemsReadItems(w http.ResponseWriter, r *http.Request, params ItemsReadItemsParams)
	// Create Item
	// (POST /api/v1/items/)
	ItemsCreateItem(w http.ResponseWriter, r *http.Request)
	// Delete Item
	// (DELETE /api/v1/items/{id})
	ItemsDeleteItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Read Item
	// (GET /api/v1/items/{id})
	ItemsReadItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update Item
	// (PUT /api/v1/items/{id})
	ItemsUpdateItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Test Token
	// (POST /api/v1/login/test-token)
	LoginTestToken(w http.ResponseWriter, r *http.Request)
	// Recover Password Html Content
	// (POST /api/v1/password-recovery-html-content/{email})
	LoginRecoverPasswordHtmlContent(w http.ResponseWriter, r *http.Request, email string)
	// Recover Password
	// (POST /api/v1/password-recovery/{email})
	LoginRecoverPassword(w http.ResponseWriter, r *http.Request, email string)
	// Reset Password
	// (POST /api/v1/reset-password/)
	LoginResetPassword(w http.ResponseWriter, r *http.Request)
	// Read Users
	// (GET /api/v1/users/)
	UsersReadUsers(w http.ResponseWriter, r *http.Request, params UsersReadUsersParams)
	// Create User
	// (POST /api/v1/users/)
	UsersCreateUser(w http.ResponseWriter, r *http.Request)
	// Delete User Me
	// (DELETE /api/v1/users/me)
	UsersDeleteUserMe(w http.ResponseWriter, r *http.Request)
	// Read User Me
	// (GET /api/v1/users/me)
	UsersReadUserMe(w http.ResponseWriter, r *http.Request)
	// Update User Me
	// (PATCH /api/v1/users/me)
	UsersUpdateUserMe(w http.ResponseWriter, r *http.Request)
	// Update Password Me
	// (PATCH /api/v1/users/me/password)
	UsersUpdatePasswordMe(w http.ResponseWriter, r *http.Request)
	// Register User
	// (POST /api/v1/users/signup)
	UsersRegisterUser(w http.ResponseWriter, r *http.Request)
	// Delete User
	// (DELETE /api/v1/users/{user_id})
	UsersDeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Read User By Id
	// (GET /api/v1/users/{user_id})
	UsersReadUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update User
	// (PATCH /api/v1/users/{user_id})
	UsersUpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Health Check
	// (GET /api/v1/utils/health-check/)
	UtilsHealthCheck(w http.ResponseWriter, r *http.Request)
	// Test Email
	// (POST /api/v1/utils/test-email/)
	UtilsTestEmail(w http.ResponseWriter, r *http.Request, params UtilsTestEmailParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Read Items
// (GET /api/v1/items/)
func (_ Unimplemented) ItemsReadItems(w http.ResponseWriter, r *http.Request, params ItemsReadItemsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Item
// (POST /api/v1/items/)
func (_ Unimplemented) ItemsCreateItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Item
// (DELETE /api/v1/items/{id})
func (_ Unimplemented) ItemsDeleteItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read Item
// (GET /api/v1/items/{id})
func (_ Unimplemented) ItemsReadItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Item
// (PUT /api/v1/items/{id})
func (_ Unimplemented) ItemsUpdateItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test Token
// (POST /api/v1/login/test-token)
func (_ Unimplemented) LoginTestToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Recover Password Html Content
// (POST /api/v1/password-recovery-html-content/{email})
func (_ Unimplemented) LoginRecoverPasswordHtmlContent(w http.ResponseWriter, r *http.Request, email string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Recover Password
// (POST /api/v1/password-recovery/{email})
func (_ Unimplemented) LoginRecoverPassword(w http.ResponseWriter, r *http.Request, email string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset Password
// (POST /api/v1/reset-password/)
func (_ Unimplemented) LoginResetPassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read Users
// (GET /api/v1/users/)
func (_ Unimplemented) UsersReadUsers(w http.ResponseWriter, r *http.Request, params UsersReadUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create User
// (POST /api/v1/users/)
func (_ Unimplemented) UsersCreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete User Me
// (DELETE /api/v1/users/me)
func (_ Unimplemented) UsersDeleteUserMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read User Me
// (GET /api/v1/users/me)
func (_ Unimplemented) UsersReadUserMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update User Me
// (PATCH /api/v1/users/me)
func (_ Unimplemented) UsersUpdateUserMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Password Me
// (PATCH /api/v1/users/me/password)
func (_ Unimplemented) UsersUpdatePasswordMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register User
// (POST /api/v1/users/signup)
func (_ Unimplemented) UsersRegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete User
// (DELETE /api/v1/users/{user_id})
func (_ Unimplemented) UsersDeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Read User By Id
// (GET /api/v1/users/{user_id})
func (_ Unimplemented) UsersReadUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update User
// (PATCH /api/v1/users/{user_id})
func (_ Unimplemented) UsersUpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health Check
// (GET /api/v1/utils/health-check/)
func (_ Unimplemented) UtilsHealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test Email
// (POST /api/v1/utils/test-email/)
func (_ Unimplemented) UtilsTestEmail(w http.ResponseWriter, r *http.Request, params UtilsTestEmailParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ItemsReadItems operation middleware
func (siw *ServerInterfaceWrapper) ItemsReadItems(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsReadItemsParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ItemsReadItems(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ItemsCreateItem operation middleware
func (siw *ServerInterfaceWrapper) ItemsCreateItem(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ItemsCreateItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ItemsDeleteItem operation middleware
func (siw *ServerInterfaceWrapper) ItemsDeleteItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ItemsDeleteItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ItemsReadItem operation middleware
func (siw *ServerInterfaceWrapper) ItemsReadItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ItemsReadItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ItemsUpdateItem operation middleware
func (siw *ServerInterfaceWrapper) ItemsUpdateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ItemsUpdateItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginTestToken operation middleware
func (siw *ServerInterfaceWrapper) LoginTestToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginTestToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginRecoverPasswordHtmlContent operation middleware
func (siw *ServerInterfaceWrapper) LoginRecoverPasswordHtmlContent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "email" -------------
	var email string

	err = runtime.BindStyledParameterWithOptions("simple", "email", chi.URLParam(r, "email"), &email, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginRecoverPasswordHtmlContent(w, r, email)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginRecoverPassword operation middleware
func (siw *ServerInterfaceWrapper) LoginRecoverPassword(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "email" -------------
	var email string

	err = runtime.BindStyledParameterWithOptions("simple", "email", chi.URLParam(r, "email"), &email, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginRecoverPassword(w, r, email)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginResetPassword operation middleware
func (siw *ServerInterfaceWrapper) LoginResetPassword(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginResetPassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersReadUsers operation middleware
func (siw *ServerInterfaceWrapper) UsersReadUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersReadUsersParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", r.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skip", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersReadUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersCreateUser operation middleware
func (siw *ServerInterfaceWrapper) UsersCreateUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersCreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersDeleteUserMe operation middleware
func (siw *ServerInterfaceWrapper) UsersDeleteUserMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersDeleteUserMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersReadUserMe operation middleware
func (siw *ServerInterfaceWrapper) UsersReadUserMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersReadUserMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersUpdateUserMe operation middleware
func (siw *ServerInterfaceWrapper) UsersUpdateUserMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersUpdateUserMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersUpdatePasswordMe operation middleware
func (siw *ServerInterfaceWrapper) UsersUpdatePasswordMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersUpdatePasswordMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersRegisterUser operation middleware
func (siw *ServerInterfaceWrapper) UsersRegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersRegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersDeleteUser operation middleware
func (siw *ServerInterfaceWrapper) UsersDeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersDeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersReadUserById operation middleware
func (siw *ServerInterfaceWrapper) UsersReadUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersReadUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersUpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UsersUpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersUpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UtilsHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) UtilsHealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UtilsHealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UtilsTestEmail operation middleware
func (siw *ServerInterfaceWrapper) UtilsTestEmail(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2PasswordBearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UtilsTestEmailParams

	// ------------- Required query parameter "email_to" -------------

	if paramValue := r.URL.Query().Get("email_to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "email_to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email_to", r.URL.Query(), &params.EmailTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email_to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UtilsTestEmail(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/items/", wrapper.ItemsReadItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/items/", wrapper.ItemsCreateItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/items/{id}", wrapper.ItemsDeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/items/{id}", wrapper.ItemsReadItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/items/{id}", wrapper.ItemsUpdateItem)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/login/test-token", wrapper.LoginTestToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/password-recovery-html-content/{email}", wrapper.LoginRecoverPasswordHtmlContent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/password-recovery/{email}", wrapper.LoginRecoverPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/reset-password/", wrapper.LoginResetPassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/", wrapper.UsersReadUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users/", wrapper.UsersCreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/me", wrapper.UsersDeleteUserMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.UsersReadUserMe)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/users/me", wrapper.UsersUpdateUserMe)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/users/me/password", wrapper.UsersUpdatePasswordMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users/signup", wrapper.UsersRegisterUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{user_id}", wrapper.UsersDeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{user_id}", wrapper.UsersReadUserById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/users/{user_id}", wrapper.UsersUpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/utils/health-check/", wrapper.UtilsHealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/utils/test-email/", wrapper.UtilsTestEmail)
	})

	return r
}

type ItemsReadItemsRequestObject struct {
	Params ItemsReadItemsParams
}

type ItemsReadItemsResponseObject interface {
	VisitItemsReadItemsResponse(w http.ResponseWriter) error
}

type ItemsReadItems200JSONResponse ItemsPublic

func (response ItemsReadItems200JSONResponse) VisitItemsReadItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsReadItems422JSONResponse HTTPValidationError

func (response ItemsReadItems422JSONResponse) VisitItemsReadItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ItemsCreateItemRequestObject struct {
	Body *ItemsCreateItemJSONRequestBody
}

type ItemsCreateItemResponseObject interface {
	VisitItemsCreateItemResponse(w http.ResponseWriter) error
}

type ItemsCreateItem200JSONResponse ItemPublic

func (response ItemsCreateItem200JSONResponse) VisitItemsCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsCreateItem422JSONResponse HTTPValidationError

func (response ItemsCreateItem422JSONResponse) VisitItemsCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ItemsDeleteItemRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type ItemsDeleteItemResponseObject interface {
	VisitItemsDeleteItemResponse(w http.ResponseWriter) error
}

type ItemsDeleteItem200JSONResponse Message

func (response ItemsDeleteItem200JSONResponse) VisitItemsDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsDeleteItem422JSONResponse HTTPValidationError

func (response ItemsDeleteItem422JSONResponse) VisitItemsDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ItemsReadItemRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type ItemsReadItemResponseObject interface {
	VisitItemsReadItemResponse(w http.ResponseWriter) error
}

type ItemsReadItem200JSONResponse ItemPublic

func (response ItemsReadItem200JSONResponse) VisitItemsReadItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsReadItem422JSONResponse HTTPValidationError

func (response ItemsReadItem422JSONResponse) VisitItemsReadItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ItemsUpdateItemRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *ItemsUpdateItemJSONRequestBody
}

type ItemsUpdateItemResponseObject interface {
	VisitItemsUpdateItemResponse(w http.ResponseWriter) error
}

type ItemsUpdateItem200JSONResponse ItemPublic

func (response ItemsUpdateItem200JSONResponse) VisitItemsUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsUpdateItem422JSONResponse HTTPValidationError

func (response ItemsUpdateItem422JSONResponse) VisitItemsUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoginTestTokenRequestObject struct {
}

type LoginTestTokenResponseObject interface {
	VisitLoginTestTokenResponse(w http.ResponseWriter) error
}

type LoginTestToken200JSONResponse UserPublic

func (response LoginTestToken200JSONResponse) VisitLoginTestTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRecoverPasswordHtmlContentRequestObject struct {
	Email string `json:"email"`
}

type LoginRecoverPasswordHtmlContentResponseObject interface {
	VisitLoginRecoverPasswordHtmlContentResponse(w http.ResponseWriter) error
}

type LoginRecoverPasswordHtmlContent200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response LoginRecoverPasswordHtmlContent200TexthtmlResponse) VisitLoginRecoverPasswordHtmlContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type LoginRecoverPasswordHtmlContent422JSONResponse HTTPValidationError

func (response LoginRecoverPasswordHtmlContent422JSONResponse) VisitLoginRecoverPasswordHtmlContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoginRecoverPasswordRequestObject struct {
	Email string `json:"email"`
}

type LoginRecoverPasswordResponseObject interface {
	VisitLoginRecoverPasswordResponse(w http.ResponseWriter) error
}

type LoginRecoverPassword200JSONResponse Message

func (response LoginRecoverPassword200JSONResponse) VisitLoginRecoverPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRecoverPassword422JSONResponse HTTPValidationError

func (response LoginRecoverPassword422JSONResponse) VisitLoginRecoverPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoginResetPasswordRequestObject struct {
	Body *LoginResetPasswordJSONRequestBody
}

type LoginResetPasswordResponseObject interface {
	VisitLoginResetPasswordResponse(w http.ResponseWriter) error
}

type LoginResetPassword200JSONResponse Message

func (response LoginResetPassword200JSONResponse) VisitLoginResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginResetPassword422JSONResponse HTTPValidationError

func (response LoginResetPassword422JSONResponse) VisitLoginResetPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersReadUsersRequestObject struct {
	Params UsersReadUsersParams
}

type UsersReadUsersResponseObject interface {
	VisitUsersReadUsersResponse(w http.ResponseWriter) error
}

type UsersReadUsers200JSONResponse UsersPublic

func (response UsersReadUsers200JSONResponse) VisitUsersReadUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersReadUsers422JSONResponse HTTPValidationError

func (response UsersReadUsers422JSONResponse) VisitUsersReadUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersCreateUserRequestObject struct {
	Body *UsersCreateUserJSONRequestBody
}

type UsersCreateUserResponseObject interface {
	VisitUsersCreateUserResponse(w http.ResponseWriter) error
}

type UsersCreateUser200JSONResponse UserPublic

func (response UsersCreateUser200JSONResponse) VisitUsersCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersCreateUser422JSONResponse HTTPValidationError

func (response UsersCreateUser422JSONResponse) VisitUsersCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersDeleteUserMeRequestObject struct {
}

type UsersDeleteUserMeResponseObject interface {
	VisitUsersDeleteUserMeResponse(w http.ResponseWriter) error
}

type UsersDeleteUserMe200JSONResponse Message

func (response UsersDeleteUserMe200JSONResponse) VisitUsersDeleteUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersReadUserMeRequestObject struct {
}

type UsersReadUserMeResponseObject interface {
	VisitUsersReadUserMeResponse(w http.ResponseWriter) error
}

type UsersReadUserMe200JSONResponse UserPublic

func (response UsersReadUserMe200JSONResponse) VisitUsersReadUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdateUserMeRequestObject struct {
	Body *UsersUpdateUserMeJSONRequestBody
}

type UsersUpdateUserMeResponseObject interface {
	VisitUsersUpdateUserMeResponse(w http.ResponseWriter) error
}

type UsersUpdateUserMe200JSONResponse UserPublic

func (response UsersUpdateUserMe200JSONResponse) VisitUsersUpdateUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdateUserMe422JSONResponse HTTPValidationError

func (response UsersUpdateUserMe422JSONResponse) VisitUsersUpdateUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdatePasswordMeRequestObject struct {
	Body *UsersUpdatePasswordMeJSONRequestBody
}

type UsersUpdatePasswordMeResponseObject interface {
	VisitUsersUpdatePasswordMeResponse(w http.ResponseWriter) error
}

type UsersUpdatePasswordMe200JSONResponse Message

func (response UsersUpdatePasswordMe200JSONResponse) VisitUsersUpdatePasswordMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdatePasswordMe422JSONResponse HTTPValidationError

func (response UsersUpdatePasswordMe422JSONResponse) VisitUsersUpdatePasswordMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersRegisterUserRequestObject struct {
	Body *UsersRegisterUserJSONRequestBody
}

type UsersRegisterUserResponseObject interface {
	VisitUsersRegisterUserResponse(w http.ResponseWriter) error
}

type UsersRegisterUser200JSONResponse UserPublic

func (response UsersRegisterUser200JSONResponse) VisitUsersRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersRegisterUser422JSONResponse HTTPValidationError

func (response UsersRegisterUser422JSONResponse) VisitUsersRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersDeleteUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type UsersDeleteUserResponseObject interface {
	VisitUsersDeleteUserResponse(w http.ResponseWriter) error
}

type UsersDeleteUser200JSONResponse Message

func (response UsersDeleteUser200JSONResponse) VisitUsersDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersDeleteUser422JSONResponse HTTPValidationError

func (response UsersDeleteUser422JSONResponse) VisitUsersDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersReadUserByIdRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type UsersReadUserByIdResponseObject interface {
	VisitUsersReadUserByIdResponse(w http.ResponseWriter) error
}

type UsersReadUserById200JSONResponse UserPublic

func (response UsersReadUserById200JSONResponse) VisitUsersReadUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersReadUserById422JSONResponse HTTPValidationError

func (response UsersReadUserById422JSONResponse) VisitUsersReadUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdateUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Body   *UsersUpdateUserJSONRequestBody
}

type UsersUpdateUserResponseObject interface {
	VisitUsersUpdateUserResponse(w http.ResponseWriter) error
}

type UsersUpdateUser200JSONResponse UserPublic

func (response UsersUpdateUser200JSONResponse) VisitUsersUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UsersUpdateUser422JSONResponse HTTPValidationError

func (response UsersUpdateUser422JSONResponse) VisitUsersUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UtilsHealthCheckRequestObject struct {
}

type UtilsHealthCheckResponseObject interface {
	VisitUtilsHealthCheckResponse(w http.ResponseWriter) error
}

type UtilsHealthCheck200JSONResponse bool

func (response UtilsHealthCheck200JSONResponse) VisitUtilsHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UtilsTestEmailRequestObject struct {
	Params UtilsTestEmailParams
}

type UtilsTestEmailResponseObject interface {
	VisitUtilsTestEmailResponse(w http.ResponseWriter) error
}

type UtilsTestEmail201JSONResponse Message

func (response UtilsTestEmail201JSONResponse) VisitUtilsTestEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UtilsTestEmail422JSONResponse HTTPValidationError

func (response UtilsTestEmail422JSONResponse) VisitUtilsTestEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Read Items
	// (GET /api/v1/items/)
	ItemsReadItems(ctx context.Context, request ItemsReadItemsRequestObject) (ItemsReadItemsResponseObject, error)
	// Create Item
	// (POST /api/v1/items/)
	ItemsCreateItem(ctx context.Context, request ItemsCreateItemRequestObject) (ItemsCreateItemResponseObject, error)
	// Delete Item
	// (DELETE /api/v1/items/{id})
	ItemsDeleteItem(ctx context.Context, request ItemsDeleteItemRequestObject) (ItemsDeleteItemResponseObject, error)
	// Read Item
	// (GET /api/v1/items/{id})
	ItemsReadItem(ctx context.Context, request ItemsReadItemRequestObject) (ItemsReadItemResponseObject, error)
	// Update Item
	// (PUT /api/v1/items/{id})
	ItemsUpdateItem(ctx context.Context, request ItemsUpdateItemRequestObject) (ItemsUpdateItemResponseObject, error)
	// Test Token
	// (POST /api/v1/login/test-token)
	LoginTestToken(ctx context.Context, request LoginTestTokenRequestObject) (LoginTestTokenResponseObject, error)
	// Recover Password Html Content
	// (POST /api/v1/password-recovery-html-content/{email})
	LoginRecoverPasswordHtmlContent(ctx context.Context, request LoginRecoverPasswordHtmlContentRequestObject) (LoginRecoverPasswordHtmlContentResponseObject, error)
	// Recover Password
	// (POST /api/v1/password-recovery/{email})
	LoginRecoverPassword(ctx context.Context, request LoginRecoverPasswordRequestObject) (LoginRecoverPasswordResponseObject, error)
	// Reset Password
	// (POST /api/v1/reset-password/)
	LoginResetPassword(ctx context.Context, request LoginResetPasswordRequestObject) (LoginResetPasswordResponseObject, error)
	// Read Users
	// (GET /api/v1/users/)
	UsersReadUsers(ctx context.Context, request UsersReadUsersRequestObject) (UsersReadUsersResponseObject, error)
	// Create User
	// (POST /api/v1/users/)
	UsersCreateUser(ctx context.Context, request UsersCreateUserRequestObject) (UsersCreateUserResponseObject, error)
	// Delete User Me
	// (DELETE /api/v1/users/me)
	UsersDeleteUserMe(ctx context.Context, request UsersDeleteUserMeRequestObject) (UsersDeleteUserMeResponseObject, error)
	// Read User Me
	// (GET /api/v1/users/me)
	UsersReadUserMe(ctx context.Context, request UsersReadUserMeRequestObject) (UsersReadUserMeResponseObject, error)
	// Update User Me
	// (PATCH /api/v1/users/me)
	UsersUpdateUserMe(ctx context.Context, request UsersUpdateUserMeRequestObject) (UsersUpdateUserMeResponseObject, error)
	// Update Password Me
	// (PATCH /api/v1/users/me/password)
	UsersUpdatePasswordMe(ctx context.Context, request UsersUpdatePasswordMeRequestObject) (UsersUpdatePasswordMeResponseObject, error)
	// Register User
	// (POST /api/v1/users/signup)
	UsersRegisterUser(ctx context.Context, request UsersRegisterUserRequestObject) (UsersRegisterUserResponseObject, error)
	// Delete User
	// (DELETE /api/v1/users/{user_id})
	UsersDeleteUser(ctx context.Context, request UsersDeleteUserRequestObject) (UsersDeleteUserResponseObject, error)
	// Read User By Id
	// (GET /api/v1/users/{user_id})
	UsersReadUserById(ctx context.Context, request UsersReadUserByIdRequestObject) (UsersReadUserByIdResponseObject, error)
	// Update User
	// (PATCH /api/v1/users/{user_id})
	UsersUpdateUser(ctx context.Context, request UsersUpdateUserRequestObject) (UsersUpdateUserResponseObject, error)
	// Health Check
	// (GET /api/v1/utils/health-check/)
	UtilsHealthCheck(ctx context.Context, request UtilsHealthCheckRequestObject) (UtilsHealthCheckResponseObject, error)
	// Test Email
	// (POST /api/v1/utils/test-email/)
	UtilsTestEmail(ctx context.Context, request UtilsTestEmailRequestObject) (UtilsTestEmailResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ItemsReadItems operation middleware
func (sh *strictHandler) ItemsReadItems(w http.ResponseWriter, r *http.Request, params ItemsReadItemsParams) {
	var request ItemsReadItemsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsReadItems(ctx, request.(ItemsReadItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsReadItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ItemsReadItemsResponseObject); ok {
		if err := validResponse.VisitItemsReadItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ItemsCreateItem operation middleware
func (sh *strictHandler) ItemsCreateItem(w http.ResponseWriter, r *http.Request) {
	var request ItemsCreateItemRequestObject

	var body ItemsCreateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsCreateItem(ctx, request.(ItemsCreateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsCreateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ItemsCreateItemResponseObject); ok {
		if err := validResponse.VisitItemsCreateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ItemsDeleteItem operation middleware
func (sh *strictHandler) ItemsDeleteItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request ItemsDeleteItemRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsDeleteItem(ctx, request.(ItemsDeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsDeleteItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ItemsDeleteItemResponseObject); ok {
		if err := validResponse.VisitItemsDeleteItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ItemsReadItem operation middleware
func (sh *strictHandler) ItemsReadItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request ItemsReadItemRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsReadItem(ctx, request.(ItemsReadItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsReadItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ItemsReadItemResponseObject); ok {
		if err := validResponse.VisitItemsReadItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ItemsUpdateItem operation middleware
func (sh *strictHandler) ItemsUpdateItem(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request ItemsUpdateItemRequestObject

	request.Id = id

	var body ItemsUpdateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsUpdateItem(ctx, request.(ItemsUpdateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsUpdateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ItemsUpdateItemResponseObject); ok {
		if err := validResponse.VisitItemsUpdateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginTestToken operation middleware
func (sh *strictHandler) LoginTestToken(w http.ResponseWriter, r *http.Request) {
	var request LoginTestTokenRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginTestToken(ctx, request.(LoginTestTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginTestToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginTestTokenResponseObject); ok {
		if err := validResponse.VisitLoginTestTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginRecoverPasswordHtmlContent operation middleware
func (sh *strictHandler) LoginRecoverPasswordHtmlContent(w http.ResponseWriter, r *http.Request, email string) {
	var request LoginRecoverPasswordHtmlContentRequestObject

	request.Email = email

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginRecoverPasswordHtmlContent(ctx, request.(LoginRecoverPasswordHtmlContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginRecoverPasswordHtmlContent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginRecoverPasswordHtmlContentResponseObject); ok {
		if err := validResponse.VisitLoginRecoverPasswordHtmlContentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginRecoverPassword operation middleware
func (sh *strictHandler) LoginRecoverPassword(w http.ResponseWriter, r *http.Request, email string) {
	var request LoginRecoverPasswordRequestObject

	request.Email = email

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginRecoverPassword(ctx, request.(LoginRecoverPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginRecoverPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginRecoverPasswordResponseObject); ok {
		if err := validResponse.VisitLoginRecoverPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginResetPassword operation middleware
func (sh *strictHandler) LoginResetPassword(w http.ResponseWriter, r *http.Request) {
	var request LoginResetPasswordRequestObject

	var body LoginResetPasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginResetPassword(ctx, request.(LoginResetPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginResetPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResetPasswordResponseObject); ok {
		if err := validResponse.VisitLoginResetPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersReadUsers operation middleware
func (sh *strictHandler) UsersReadUsers(w http.ResponseWriter, r *http.Request, params UsersReadUsersParams) {
	var request UsersReadUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersReadUsers(ctx, request.(UsersReadUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersReadUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersReadUsersResponseObject); ok {
		if err := validResponse.VisitUsersReadUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersCreateUser operation middleware
func (sh *strictHandler) UsersCreateUser(w http.ResponseWriter, r *http.Request) {
	var request UsersCreateUserRequestObject

	var body UsersCreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersCreateUser(ctx, request.(UsersCreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersCreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersCreateUserResponseObject); ok {
		if err := validResponse.VisitUsersCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersDeleteUserMe operation middleware
func (sh *strictHandler) UsersDeleteUserMe(w http.ResponseWriter, r *http.Request) {
	var request UsersDeleteUserMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersDeleteUserMe(ctx, request.(UsersDeleteUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersDeleteUserMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersDeleteUserMeResponseObject); ok {
		if err := validResponse.VisitUsersDeleteUserMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersReadUserMe operation middleware
func (sh *strictHandler) UsersReadUserMe(w http.ResponseWriter, r *http.Request) {
	var request UsersReadUserMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersReadUserMe(ctx, request.(UsersReadUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersReadUserMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersReadUserMeResponseObject); ok {
		if err := validResponse.VisitUsersReadUserMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersUpdateUserMe operation middleware
func (sh *strictHandler) UsersUpdateUserMe(w http.ResponseWriter, r *http.Request) {
	var request UsersUpdateUserMeRequestObject

	var body UsersUpdateUserMeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersUpdateUserMe(ctx, request.(UsersUpdateUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersUpdateUserMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersUpdateUserMeResponseObject); ok {
		if err := validResponse.VisitUsersUpdateUserMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersUpdatePasswordMe operation middleware
func (sh *strictHandler) UsersUpdatePasswordMe(w http.ResponseWriter, r *http.Request) {
	var request UsersUpdatePasswordMeRequestObject

	var body UsersUpdatePasswordMeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersUpdatePasswordMe(ctx, request.(UsersUpdatePasswordMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersUpdatePasswordMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersUpdatePasswordMeResponseObject); ok {
		if err := validResponse.VisitUsersUpdatePasswordMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersRegisterUser operation middleware
func (sh *strictHandler) UsersRegisterUser(w http.ResponseWriter, r *http.Request) {
	var request UsersRegisterUserRequestObject

	var body UsersRegisterUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersRegisterUser(ctx, request.(UsersRegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersRegisterUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersRegisterUserResponseObject); ok {
		if err := validResponse.VisitUsersRegisterUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersDeleteUser operation middleware
func (sh *strictHandler) UsersDeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request UsersDeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersDeleteUser(ctx, request.(UsersDeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersDeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersDeleteUserResponseObject); ok {
		if err := validResponse.VisitUsersDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersReadUserById operation middleware
func (sh *strictHandler) UsersReadUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request UsersReadUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersReadUserById(ctx, request.(UsersReadUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersReadUserById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersReadUserByIdResponseObject); ok {
		if err := validResponse.VisitUsersReadUserByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UsersUpdateUser operation middleware
func (sh *strictHandler) UsersUpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request UsersUpdateUserRequestObject

	request.UserId = userId

	var body UsersUpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UsersUpdateUser(ctx, request.(UsersUpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UsersUpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UsersUpdateUserResponseObject); ok {
		if err := validResponse.VisitUsersUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UtilsHealthCheck operation middleware
func (sh *strictHandler) UtilsHealthCheck(w http.ResponseWriter, r *http.Request) {
	var request UtilsHealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UtilsHealthCheck(ctx, request.(UtilsHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UtilsHealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UtilsHealthCheckResponseObject); ok {
		if err := validResponse.VisitUtilsHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UtilsTestEmail operation middleware
func (sh *strictHandler) UtilsTestEmail(w http.ResponseWriter, r *http.Request, params UtilsTestEmailParams) {
	var request UtilsTestEmailRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UtilsTestEmail(ctx, request.(UtilsTestEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UtilsTestEmail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UtilsTestEmailResponseObject); ok {
		if err := validResponse.VisitUtilsTestEmailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb31PbPhL/VzS6e0xq4L7fmZu8FdoezEDLQHovHYYR9iZRsS1XkkkzTP73G0mWLcdW",
	"bGidcpAnHHm12h8frXZX5hGHLMlYCqkUePKIRbiAhOjH0+n08r8kphGRlKUfOWdcDWecZcAlBU0UgSQ0",
	"Vk9UQqKH/slhhif4H0HFOSjYBpv81iMsqYwBT/AHw2mE5SpTvwnnZIXXDkWbQCU5u/sOoVQMzyQkJxyI",
	"hDZxRchppuarnwn5eQ7pXC7w5Ojvv11ZKrJyBSE5TeeOyM35CU3t78OK21T/bfBZjzCHHznlEOHJt4L6",
	"pprm6OHR8jK/i2k4lJY0UpNnjCdE4gnOcxphR7qobQ5bpsBvt8/8omhQ+/wBLasVciTcsHRhS4+lv2bR",
	"/wOeXIUKkT0KCR92QpanUj1YXid6oGRDUwlz0Ds3IpL03vmOjd1Nr1i0bHnXfZGhMYJteE343XYBQpB5",
	"i8+S6oVlZWm7kGSnOlI0plYSfIblJRFiyXjUlCKF5W3mvHVc/9dBzfP/rhb7DEtUsmwDEruH1FVsqgc6",
	"N0hBVZPpprZsc9VKT4M0v6phzjmk8unqnpiJW1UewI4b1mmI7zfUhiXabCWA+w4nSIqjtIycZmTkjSsf",
	"k9qRWVlllsfxbUoS2BaVPuVxjD4rorboL25JKOkDmDA3I3ks8UTyHJwdKNB7Q1MyuGMsBpIWHESeAc8F",
	"8BqTGYlFnct1SdfG6Mnu7e1aa99WX1ae8vjRF0Jflh+fcYq/GN973EUbjvIfA+rtFcypkMBfuKv+HM5L",
	"A3kM6Et/9hFrFxHL9ZQ/q6veXrxsT7VqdOHVaeeZqhNPflOm6qrRomVnkR2zsCY9SVdfZnjy7bHhnMeG",
	"8jeODucsJPUapNBjhBMx75UQ24GKVMuMpmq0KwwpPcxSBaVjo87Cfj3CAsKcU7m6Vp4ypvnyPpeLI7t9",
	"joFws3VnMVtqAncripBleppNlb/yGE9wQDIaPBwGMZvTNCBhCEKMTU68XldyELUSXqshms6YawON9mtJ",
	"wnv0iQj5/vIMXXKm5R7hB+BC14f44N3huwNdJmeQkoziCf6XHlIRQy60vFYY7exAjcxBNkpNfAWSU3gA",
	"pOneYc2Ta/udRbY4ugIS6Qe9ACcJSOBCA4cqJj9y4CuVzurNjMU9zfCoaAHV4t9B5adrQ7QJMwW9Np4x",
	"TahsZ3p44LA9L+gafG8UhETGUmEcfnRwYDZ/KsFsf5JlMTXADr4LU4hXy3XVpHZfar/WbXydayjM8hhd",
	"FSIo5/11dPTbJGhrabVIUpEgS1PtBu3P9n3w7UbZT+RJQvhKo4ZEyCJCkrnCQhFWVJzImGiBmkmCUQpL",
	"DTYP1gyVesRm04OQxyxa/VZnFfn4uh5Y1BG/HhgmbwklhcMLX27CZD3aiFGPNFob1MQgoYmfD3ockXQb",
	"fAxRsWRbrFIBsgoruoipI8CNMU8pdwaNMPYcfRO4KRztwc2o/SD7D0iNC3S3QmcfOg6yV4WNtxZWysOn",
	"/ezJW8BhaoOO0GGI/hw8hjnqikJvf9QNiskCYN1HnakNJAg5Lpvs7enSFIREpohAtrFeR+254qXIbHd+",
	"MHe6pWxPdz7Pjlrp8rKhMKO2Wd2MthobcwjZA/DVeCGTeFwoGzzqpsTab9zT6cU5OjHUaMZ42cVHVwXD",
	"dmsXby31qUzigkuvmGF7Jf6w0dE16XGQSPgpA2WNuns3Gb2Jg0I7q/Ktcheq/PUUfHVD6nkIejGweZO5",
	"qRcq29HBQYAcW4wEfkxcKULkXPi1AkKAdNYdIhFwL153nAm8DnQoN/bDRi6A9+m3abpmJqpbvCrD1Q/7",
	"fps3HXl7/TaLCAs+jaB+/TZF6sGaofpqbqCGiD3O/feOQ88zstbX0G8rfLkJk0aMSqBHt40t023oMVTq",
	"UV+8vZhT5JcaT0odZC4SG1vN23sqvu7ZZiwb1oc11c5qtTIo+WyVERkuvM2YDmQZKsdcw0Sm8tZ4H5t2",
	"0SDxw6UlPAXunWs3mCz1VkBZOYcDVf3TvX22PTimysK7H64Enad55q/ZNtImtKRywXKJ5EINQoQkQ3eA",
	"YjafQ4Ro6g325lOogTOr8ourffx6XmVnzNc7aXpUf2573lT2y5x6tYCKZZ915aCD7v7KcgdXlh4UbUkb",
	"CRIZhHRGQxNt7laIRh354/HqLHqloHlraVGVQx+vCms/MY0m/ZLoP42XIbP3/dm3s9y944iUNBbBAkgs",
	"F+NwAeG92wjdwKeiPdWkJ4ryV0tii0Nrc6QXGJsVkF2i8Y8B/Qvk0hybLK091Hpt9tCXvfoKJ+i47dVE",
	"bU1hxUdRfCy/v+9sCmtet5L128z2hql2j4SmrFf4P9znDM++6y4v7DZRtF7/LwAA///otT4UUz0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
