// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2PasswordBearerScopes = "OAuth2PasswordBearer.Scopes"
)

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// ItemCreate defines model for ItemCreate.
type ItemCreate struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// ItemPublic defines model for ItemPublic.
type ItemPublic struct {
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	OwnerId     openapi_types.UUID `json:"owner_id"`
	Title       string             `json:"title"`
}

// ItemUpdate defines model for ItemUpdate.
type ItemUpdate struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// ItemsPublic defines model for ItemsPublic.
type ItemsPublic struct {
	Count int          `json:"count"`
	Data  []ItemPublic `json:"data"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// NewPassword defines model for NewPassword.
type NewPassword struct {
	NewPassword string `json:"new_password"`
	Token       string `json:"token"`
}

// UpdatePassword defines model for UpdatePassword.
type UpdatePassword struct {
	CurrentPassword string `json:"current_password"`
	NewPassword     string `json:"new_password"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email       openapi_types.Email `json:"email"`
	FullName    *string             `json:"full_name,omitempty"`
	IsActive    *bool               `json:"is_active,omitempty"`
	IsSuperuser *bool               `json:"is_superuser,omitempty"`
	Password    string              `json:"password"`
}

// UserPublic defines model for UserPublic.
type UserPublic struct {
	Email       openapi_types.Email `json:"email"`
	FullName    *string             `json:"full_name,omitempty"`
	Id          openapi_types.UUID  `json:"id"`
	IsActive    *bool               `json:"is_active,omitempty"`
	IsSuperuser *bool               `json:"is_superuser,omitempty"`
}

// UserRegister defines model for UserRegister.
type UserRegister struct {
	Email    openapi_types.Email `json:"email"`
	FullName *string             `json:"full_name,omitempty"`
	Password string              `json:"password"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email       *openapi_types.Email `json:"email,omitempty"`
	FullName    *string              `json:"full_name,omitempty"`
	IsActive    *bool                `json:"is_active,omitempty"`
	IsSuperuser *bool                `json:"is_superuser,omitempty"`
	Password    *string              `json:"password,omitempty"`
}

// UserUpdateMe defines model for UserUpdateMe.
type UserUpdateMe struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	FullName *string              `json:"full_name,omitempty"`
}

// UsersPublic defines model for UsersPublic.
type UsersPublic struct {
	Count int          `json:"count"`
	Data  []UserPublic `json:"data"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// ItemsReadItemsParams defines parameters for ItemsReadItems.
type ItemsReadItemsParams struct {
	Skip  *int `form:"skip,omitempty" json:"skip,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UsersReadUsersParams defines parameters for UsersReadUsers.
type UsersReadUsersParams struct {
	Skip  *int `form:"skip,omitempty" json:"skip,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UtilsTestEmailParams defines parameters for UtilsTestEmail.
type UtilsTestEmailParams struct {
	EmailTo openapi_types.Email `form:"email_to" json:"email_to"`
}

// ItemsCreateItemJSONRequestBody defines body for ItemsCreateItem for application/json ContentType.
type ItemsCreateItemJSONRequestBody = ItemCreate

// ItemsUpdateItemJSONRequestBody defines body for ItemsUpdateItem for application/json ContentType.
type ItemsUpdateItemJSONRequestBody = ItemUpdate

// LoginResetPasswordJSONRequestBody defines body for LoginResetPassword for application/json ContentType.
type LoginResetPasswordJSONRequestBody = NewPassword

// UsersCreateUserJSONRequestBody defines body for UsersCreateUser for application/json ContentType.
type UsersCreateUserJSONRequestBody = UserCreate

// UsersUpdateUserMeJSONRequestBody defines body for UsersUpdateUserMe for application/json ContentType.
type UsersUpdateUserMeJSONRequestBody = UserUpdateMe

// UsersUpdatePasswordMeJSONRequestBody defines body for UsersUpdatePasswordMe for application/json ContentType.
type UsersUpdatePasswordMeJSONRequestBody = UpdatePassword

// UsersRegisterUserJSONRequestBody defines body for UsersRegisterUser for application/json ContentType.
type UsersRegisterUserJSONRequestBody = UserRegister

// UsersUpdateUserJSONRequestBody defines body for UsersUpdateUser for application/json ContentType.
type UsersUpdateUserJSONRequestBody = UserUpdate

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
